{
  "Uuid": "e02fea93-6b43-4289-929a-79088e118aec",
  "IsCustomNode": false,
  "Description": "",
  "Name": "automatic_grids",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "CoreNodeModels.Watch, CoreNodeModels",
      "NodeType": "ExtensionNode",
      "Id": "eb126610ec6946e881ee99589189fe59",
      "Inputs": [
        {
          "Id": "b58e924218b049fe9bfb1f84b5c21f4f",
          "Name": "",
          "Description": "Node to show output from",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8609270c6a5042aa9550101b8c401b3a",
          "Name": "",
          "Description": "Node output",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Visualize the node's output"
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nclr.AddReference('ProtoGeometry')\r\nfrom Autodesk.DesignScript.Geometry import *\r\n\r\nclr.AddReference('RevitAPI')\r\nimport Autodesk\r\nfrom Autodesk.Revit.DB import *\r\n\r\nclr.AddReference('RevitNodes')\r\nimport Revit\r\nclr.ImportExtensions(Revit.GeometryConversion)\r\n\r\nclr.AddReference('RevitAPIUI')\r\nfrom Autodesk.Revit.UI import *\r\nfrom Autodesk.Revit.UI.Selection import *\r\n# Import RevitAPI and RevitAPIUI\r\nclr.AddReference(\"RevitAPI\")\r\nclr.AddReference(\"RevitAPIUI\")\r\nfrom Autodesk.Revit.DB import *\r\n\r\n# Get the active document\r\nfrom RevitServices.Persistence import DocumentManager\r\nclr.AddReference('RevitServices')\r\nimport RevitServices\r\nfrom RevitServices.Persistence import DocumentManager\r\n\r\ndoc = DocumentManager.Instance.CurrentDBDocument\r\nuidoc = DocumentManager.Instance.CurrentUIApplication.ActiveUIDocument\r\n\r\nlength = IN[0]\r\n\r\ndef create_horizontal_gridlines(start_point, arr_len):\r\n    # Set initial point\r\n    arr_len = arr_len +1\r\n    # Generate names 1 to 9 for the grid lines\r\n    gridline_names = [str(i) for i in range(1, arr_len)]\r\n\r\n    # Create horizontal grid lines\r\n    for i, name in enumerate(gridline_names):\r\n        line_start = XYZ(start_point.X + 10 * i, start_point.Y, start_point.Z)\r\n        line_end = XYZ(start_point.X + 10 * i, start_point.Y-10, start_point.Z)\r\n        line = Line.CreateBound(line_end,line_start)\r\n        level = FilteredElementCollector(doc).OfClass(Level).FirstElement()\r\n        grid = Grid.Create(doc, line)\r\n        grid.Name = name\r\n        grid.Level = level.Id\r\n\r\ndef create_vertical_gridlines(start_point, arr_len):\r\n    # Generate names for the grid lines\r\n    gridline_names = []\r\n    for i in range(arr_len):\r\n        char = chr(65 + i % 26)\r\n        if i >= 26:\r\n            char = chr(65 + (i // 26) - 1) + chr(65 + i % 26)\r\n        gridline_names.append(char)\r\n\r\n    # Create vertical grid lines\r\n    for i, name in enumerate(gridline_names):\r\n        line_start = XYZ(start_point.X, start_point.Y - 10 * i, start_point.Z)\r\n        line_end = XYZ(start_point.X - 10, start_point.Y - 10 * i, start_point.Z)\r\n        line = Line.CreateBound(line_start, line_end)\r\n        level = FilteredElementCollector(doc).OfClass(Level).FirstElement()\r\n        grid = Grid.Create(doc, line)\r\n        grid.Name = name\r\n        grid.Level = level.Id\r\n\r\n\r\nTaskDialog.Show(\"Info\", \"Pick Upper leftmost point of the plan. This will be the start point of the grid. \")\r\npt = uidoc.Selection.PickPoint(\"Pick Upper leftmost point of the plan. This will be the start point of the grid.\")\r\n\r\n# Wrap the script in a transaction\r\nt = Transaction(doc, \"Create Gridlines\")\r\nt.Start()\r\n\r\n# Create the gridlines\r\ncreate_horizontal_gridlines(pt, length)\r\ncreate_vertical_gridlines(pt, length)\r\n\r\n# Commit the transaction and output a message\r\nt.Commit()\r\nprint(\"Grid lines created successfully.\")\r\n\r\nOUT = pt",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "be0842dba4f14d399ba070fbdd6a5717",
      "Inputs": [
        {
          "Id": "f03e9d8606eb433e91298300a4fafc36",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "6d20d0fa726a4c208d194f01bec4ef10",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    },
    {
      "ConcreteType": "PythonNodeModels.PythonNode, PythonNodeModels",
      "NodeType": "PythonScriptNode",
      "Code": "import clr\r\nimport System.Windows.Forms as Forms\r\nimport System.IO as IO\r\n\r\ntry:\r\n    clr.AddReference(\"PresentationFramework\")\r\nexcept IOError:\r\n    raise\r\n\r\nclass TextInput(Forms.Form):\r\n    def __init__(self, title, default=None, description=None):\r\n        self.selected = None\r\n        self.Text = title\r\n        # self.Height = 120\r\n\r\n        button_panel = Forms.Panel()\r\n        button_panel.Dock = Forms.DockStyle.Top\r\n        self.Controls.Add(button_panel)\r\n        \r\n        ok_button = Forms.Button()\r\n        ok_button.Text = 'OK'\r\n        ok_button.DialogResult = Forms.DialogResult.OK\r\n        ok_button.Dock = Forms.DockStyle.Right\r\n        ok_button.AutoSize = True\r\n        ok_button.AutoSizeMode = Forms.AutoSizeMode.GrowAndShrink\r\n        ok_button.Width = 60  # adjust the button width here\r\n        button_panel.Controls.Add(ok_button)\r\n\r\n        cancel_button = Forms.Button()\r\n        cancel_button.Text = 'Cancel'\r\n        cancel_button.DialogResult = Forms.DialogResult.Cancel\r\n        cancel_button.Dock = Forms.DockStyle.Right\r\n        cancel_button.AutoSize = True\r\n        cancel_button.AutoSizeMode = Forms.AutoSizeMode.GrowAndShrink\r\n        cancel_button.Width = 60  # adjust the button width here\r\n        button_panel.Controls.Add(cancel_button)\r\n        \r\n        if description is not None:\r\n            label = Forms.Label()\r\n            label.Text = description\r\n            label.Dock = Forms.DockStyle.Top\r\n            label.AutoSize = True\r\n            self.Controls.Add(label)\r\n\r\n        textbox = Forms.TextBox()\r\n        textbox.Name = 'text_box'\r\n        textbox.Text = default if default is not None else ''\r\n        textbox.Dock = Forms.DockStyle.Top\r\n        self.Controls.Add(textbox)\r\n\r\n        self.AcceptButton = ok_button\r\n        self.CancelButton = cancel_button\r\n        self.StartPosition = Forms.FormStartPosition.CenterScreen\r\n\r\ndef get_user_input():\r\n    form = TextInput('Input a number', description='Length of grid array:', default='10')\r\n    result = form.ShowDialog()\r\n\r\n    if result == Forms.DialogResult.OK:\r\n        try:\r\n            value = int(form.Controls.Find('text_box', True)[0].Text)\r\n            return value\r\n        except ValueError:\r\n            return None\r\n    else:\r\n        return None\r\n\r\nnumber = get_user_input()\r\nOUT = number",
      "Engine": "CPython3",
      "VariableInputPorts": true,
      "Id": "40d5b6ec4e974e6391b19a29c644c3dc",
      "Inputs": [
        {
          "Id": "c266c40e81ce4e0cbd5c7ea8506732dc",
          "Name": "IN[0]",
          "Description": "Input #0",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "841618d5633a4a139ecab6a5445b5fbf",
          "Name": "OUT",
          "Description": "Result of the python script",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Runs an embedded Python script."
    }
  ],
  "Connectors": [
    {
      "Start": "6d20d0fa726a4c208d194f01bec4ef10",
      "End": "b58e924218b049fe9bfb1f84b5c21f4f",
      "Id": "19f9b394f97a4eecb85a6c71592db749"
    },
    {
      "Start": "841618d5633a4a139ecab6a5445b5fbf",
      "End": "f03e9d8606eb433e91298300a4fafc36",
      "Id": "e76b3809b47d4f008b54ff5c323c56b6"
    }
  ],
  "Dependencies": [],
  "NodeLibraryDependencies": [],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.12",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "1.10",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.12.1.8246",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "Background Preview",
      "EyeX": -17.0,
      "EyeY": 24.0,
      "EyeZ": 50.0,
      "LookX": 12.0,
      "LookY": -13.0,
      "LookZ": -58.0,
      "UpX": 0.0,
      "UpY": 1.0,
      "UpZ": 0.0
    },
    "NodeViews": [
      {
        "ShowGeometry": true,
        "Name": "Watch",
        "Id": "eb126610ec6946e881ee99589189fe59",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 1032.7999999999997,
        "Y": 382.40000000000003
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "be0842dba4f14d399ba070fbdd6a5717",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 791.60000000000014,
        "Y": 407.5999999999998
      },
      {
        "ShowGeometry": true,
        "Name": "Python Script",
        "Id": "40d5b6ec4e974e6391b19a29c644c3dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Excluded": false,
        "X": 608.40000000000009,
        "Y": 407.59999999999991
      }
    ],
    "Annotations": [],
    "X": -336.00000000000017,
    "Y": -43.200000000000159,
    "Zoom": 1.0
  }
}